syntax = "proto3";

package proto;

option go_package = "github.com/clintjedwards/gofer/proto";

import "gofer_transport.proto";

service Gofer {
  ////////////// System RPCs //////////////
  rpc GetSystemInfo(GetSystemInfoRequest) returns (GetSystemInfoResponse);

  ////////////// Namespace RPCs //////////////
  //
  // Namespaces are dividers for logically separating workloads. Every resource
  // belongs to a particular namespace.

  // ListNamespaces returns all registered namespaces.
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse);

  // CreateNamespace creates a new namespace that separates pipelines.
  rpc CreateNamespace(CreateNamespaceRequest) returns (CreateNamespaceResponse);

  // GetNamespace returns a single namespace by id.
  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse);

  // UpdateNamespace updates the details of a particular namespace by id.
  rpc UpdateNamespace(UpdateNamespaceRequest) returns (UpdateNamespaceResponse);

  // DeleteNamespace removes a namespace by id.
  rpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse);

  ////////////// Pipeline RPCs //////////////
  //
  // A Pipeline is a graph of containers that accomplish some goal. Pipelines
  // are created via a Pipeline configuration file and can be set to be run
  // automatically via attached triggers.

  // GetPipeline returns a single pipeline by ID.
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse);

  // ListPipelines returns all registered pipelines. Can control pagination by
  // offset && limit request parameters.
  // By default ListPipelines will return the first 100 pipelines ordered by
  // creation.
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse);

  // EnablePipeline allows a pipeline to execute runs by allowing it to receive
  // trigger events. See DisablePipeline to prevent a pipeline from executing
  // any more runs.
  rpc EnablePipeline(EnablePipelineRequest) returns (EnablePipelineResponse);

  // DisablePipeline prevents the pipeline from executing runs. Any trigger
  // events that would normally cause the pipeline to be run are instead
  // discarded.
  rpc DisablePipeline(DisablePipelineRequest) returns (DisablePipelineResponse);

  // CreatePipeline creates a new pipeline from the protobuf input. This is
  // usually autogenerated from the command line tool.
  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse);

  // UpdatePipeline updates a pipeline from the protobuf input. This input is
  // usually autogenerated from the command line tool.
  // Updating a pipeline requires the pipeline to adhere
  // to two constraints:
  //    1) The pipeline must not have any current runs in progress.
  //    2) The pipeline must be in a disabled state.
  rpc UpdatePipeline(UpdatePipelineRequest) returns (UpdatePipelineResponse);

  // DeletePipeline deletes a pipeline permenantly. It is not recoverable.
  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse);
}
